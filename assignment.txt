First Task :

1. Write a function, called dot_product which calculates in the variable ps, the dot(scalar) product of v1 and v2 (v1 and v2 are vectors of IR)


2. Write an algorithm which determines, for n pairs of given vectors, whether two vectors of given IR are orthogonal, by calling the procedure defined in the previous question. The dot product of two orthogonal vectors is zero.

SOLUTION

PROCEDURE dot_product(v1, v2)
// Calculate the dot product of two vectors v1 and v2.
    DECLARE ps // ps will store the dot product
    
IF length of v1 is not equal to length of v2 THEN
        PRINT "Error: Vector dimensions must match."
        RETURN // Exit the procedure
    
 SET ps to 0 // Initialize the dot product
    
FOR i FROM 0 TO length of v1 - 1 DO
        SET ps to ps + (v1[i] * v2[i]) // Calculate the dot product
 END FOR
    
RETURN ps // Return the dot product.
END PROCEDURE


Second Task:

1. Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. Each time we take a new card we put it in the right place in our hand.

2. Each time work only with the first i-1 element from of the array
Pick element arr[i] and insert it into sorted sequence in the array from 0 to i-1.

SOLUTION.

ALGORITHM InsertionSort(arr)
    // Sorts an array in ascending order using Insertion Sort
    INPUT: Array arr of length n
    
FOR i FROM 1 TO n-1 DO
        DECLARE newCard // Store the current element to be inserted
        SET newCard to arr[i]
        SET j to i - 1
        
// Move elements of the sorted portion to the right to make space for newCard
WHILE j >= 0 AND arr[j] > newCard DO
            arr[j + 1] = arr[j]
            DECREMENT j
END WHILE
        
 // Insert newCard into its correct position
        arr[j + 1] = newCard
END FOR
    
// Sorted array is in arr
END ALGORITHM
